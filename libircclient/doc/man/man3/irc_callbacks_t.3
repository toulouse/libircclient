.TH "irc_callbacks_t" 3 "10 Mar 2005" "libircclient" \" -*- nroff -*-
.ad l
.nh
.SH NAME
irc_callbacks_t \- Event callbacks structure. 
.SH SYNOPSIS
.br
.PP
\fC#include <libirc_events.h>\fP
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_connect\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_nick\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_quit\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_join\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_part\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_mode\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_umode\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_topic\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_kick\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_channel\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_privmsg\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_notice\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_invite\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_ctcp_req\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_ctcp_rep\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_ctcp_action\fP"
.br
.ti -1c
.RI "\fBirc_event_callback_t\fP \fBevent_unknown\fP"
.br
.ti -1c
.RI "\fBirc_eventcode_callback_t\fP \fBevent_numeric\fP"
.br
.ti -1c
.RI "\fBirc_event_dcc_chat_t\fP \fBevent_dcc_chat_req\fP"
.br
.ti -1c
.RI "\fBirc_event_dcc_send_t\fP \fBevent_dcc_send_req\fP"
.br
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
Event callbacks structure.
.PP
All the communication with the IRC network is based on events. Generally speaking, event is anything generated by someone else in the network, or by the IRC server itself. 'Someone sends you a message', 'Someone has joined the channel', 'Someone has quits IRC' - all these messages are events.
.PP
Every event has its own event handler, which is called when the  appropriate event is received. You don't have to define all the event handlers; define only the handlers for the events you need to intercept.
.PP
Most event callbacks are the types of \fBirc_event_callback_t\fP. There are  also events, which generate \fBirc_eventcode_callback_t\fP,  \fBirc_event_dcc_chat_t\fP and \fBirc_event_dcc_send_t\fP callbacks. 
.PP
.SH "FIELD DOCUMENTATION"
.PP 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_channel"
.PP
The 'channel' event is triggered upon receipt of a PRIVMSG message to an entire channel, which means that someone on a channel with the client has said something aloud. Your own messages don't trigger PRIVMSG event.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who generates the message. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, contains the channel name. 
.TP
\fB\fIparams\fP\fP
[1] optional, contains the message text 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_connect"
.PP
The 'on_connect' event is triggered when the client successfully  connects to the server, and could send commands to the server. No extra params supplied; \fIparams\fP is 0. 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_ctcp_action"
.PP
The 'action' event is triggered when the client receives the CTCP  ACTION message. These messages usually looks like:
.br
 
.PP
.nf
 [23:32:55] * Tim gonna sleep.
.fi
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who generates the message. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, the ACTION message. 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_ctcp_rep"
.PP
The 'ctcp' event is triggered when the client receives the CTCP reply.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who generates the message. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, the CTCP message itself with its arguments. 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_ctcp_req"
.PP
The 'ctcp' event is triggered when the client receives the CTCP  request. By default, the built-in CTCP request handler is used. The  build-in handler automatically replies on most CTCP messages, so you will rarely need to override it.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who generates the message. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, the complete CTCP message, including its  arguments.Mirc generates PING, FINGER, VERSION, TIME and ACTION messages, check the source code of \fClibirc_event_ctcp_internal\fP function to  see how to write your own CTCP request handler. Also you may find  useful this question in FAQ:  
.SS "\fBirc_event_dcc_chat_t\fP irc_callbacks_t::event_dcc_chat_req"
.PP
The 'dcc chat' event is triggered when someone requests a DCC CHAT from  you.
.PP
See the params in \fBirc_event_dcc_chat_t\fP specification. 
.SS "\fBirc_event_dcc_send_t\fP irc_callbacks_t::event_dcc_send_req"
.PP
The 'dcc chat' event is triggered when someone wants to send a file  to you via DCC SEND request.
.PP
See the params in \fBirc_event_dcc_send_t\fP specification. 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_invite"
.PP
The 'invite' event is triggered upon receipt of an INVITE message, which means that someone is permitting the client's entry into a +i channel.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who INVITEs you. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, contains your nick. 
.TP
\fB\fIparams\fP\fP
[1] mandatory, contains the channel name you're invited into.
.PP
\fBSee also: \fP
.in +1c
\fBirc_cmd_invite\fP irc_cmd_chanmode_invite 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_join"
.PP
The 'join' event is triggered upon receipt of a JOIN message, which means that someone has entered a channel that the client is on.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who joins the channel. By comparing it with  your own nickname, you can check whether your JOIN  command succeed. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, contains the channel name. 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_kick"
.PP
The 'kick' event is triggered upon receipt of a KICK message, which means that someone on a channel with the client (or possibly the client itself!) has been forcibly ejected.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who kicked the poor. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, contains the channel name. 
.TP
\fB\fIparams\fP\fP
[0] optional, contains the nick of kicked person. 
.TP
\fB\fIparams\fP\fP
[1] optional, contains the kick text 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_mode"
.PP
The 'mode' event is triggered upon receipt of a channel MODE message, which means that someone on a channel with the client has changed the channel's parameters.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who changed the channel mode. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, contains the channel name. 
.TP
\fB\fIparams\fP\fP
[1] mandatory, contains the changed channel mode, like  '+t', '-i' and so on. 
.TP
\fB\fIparams\fP\fP
[2] optional, contains the mode argument (for example, a key for +k mode, or user who got the channel operator status for  +o mode) 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_nick"
.PP
The 'nick' event is triggered when the client receives a NICK message, meaning that someone (including you) on a channel with the client has  changed their nickname.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who changes the nick. Note that it can be you! 
.TP
\fB\fIparams\fP\fP
[0] mandatory, contains the new nick. 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_notice"
.PP
The 'notice' event is triggered upon receipt of a NOTICE message which means that someone has sent the client a public or private notice. According to RFC 1459, the only difference between NOTICE  and PRIVMSG is that you should NEVER automatically reply to NOTICE messages. Unfortunately, this rule is frequently violated by IRC  servers itself - for example, NICKSERV messages require reply, and  are NOTICEs.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who generates the message. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, contains the channel name. 
.TP
\fB\fIparams\fP\fP
[1] optional, contains the message text 
.SS "\fBirc_eventcode_callback_t\fP irc_callbacks_t::event_numeric"
.PP
The 'numeric' event is triggered upon receipt of any numeric response from the server. There is a lot of such responses, see the full list here: \fBNumeric reply codes from RFC1459\fP.
.PP
See the params in \fBirc_eventcode_callback_t\fP specification. 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_part"
.PP
The 'part' event is triggered upon receipt of a PART message, which means that someone has left a channel that the client is on.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who leaves the channel. By comparing it with  your own nickname, you can check whether your PART  command succeed. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, contains the channel name. 
.TP
\fB\fIparams\fP\fP
[1] optional, contains the reason message (user-defined). 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_privmsg"
.PP
The 'privmsg' event is triggered upon receipt of a PRIVMSG message which is addressed to one or more clients, which means that someone is sending the client a private message.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who generates the message. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, contains your nick. 
.TP
\fB\fIparams\fP\fP
[1] optional, contains the message text 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_quit"
.PP
The 'quit' event is triggered upon receipt of a QUIT message, which means that someone on a channel with the client has disconnected.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who is disconnected 
.TP
\fB\fIparams\fP\fP
[0] optional, contains the reason message (user-specified). 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_topic"
.PP
The 'topic' event is triggered upon receipt of a TOPIC message, which means that someone on a channel with the client has changed the  channel's topic.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who changes the channel topic. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, contains the channel name. 
.TP
\fB\fIparams\fP\fP
[1] optional, contains the new topic. 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_umode"
.PP
The 'umode' event is triggered upon receipt of a user MODE message,  which means that your user mode has been changed.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIorigin\fP\fP
the person, who changed the channel mode. 
.TP
\fB\fIparams\fP\fP
[0] mandatory, contains the user changed mode, like  '+t', '-i' and so on. 
.SS "\fBirc_event_callback_t\fP irc_callbacks_t::event_unknown"
.PP
The 'unknown' event is triggered upon receipt of any number of  unclassifiable miscellaneous messages, which aren't handled by the library. 

.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for libircclient from the source code.
