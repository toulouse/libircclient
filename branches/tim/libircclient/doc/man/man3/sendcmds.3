.TH "Sending IRC commands." 3 "8 Sep 2004" "libirc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Sending IRC commands. \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBirc_send_raw\fP (\fBirc_session_t\fP *session, const char *format,...)"
.br
.RI "\fISends raw data to the IRC server.\fP"
.ti -1c
.RI "int \fBirc_cmd_quit\fP (\fBirc_session_t\fP *session, const char *reason)"
.br
.RI "\fISends QUIT command to the IRC server.\fP"
.ti -1c
.RI "int \fBirc_cmd_join\fP (\fBirc_session_t\fP *session, const char *channel, const char *key)"
.br
.RI "\fIJoins the new IRC channel.\fP"
.ti -1c
.RI "int \fBirc_cmd_msg\fP (\fBirc_session_t\fP *session, const char *nch, const char *text)"
.br
.RI "\fISends the message to the nick or to the channel.\fP"
.ti -1c
.RI "int \fBirc_cmd_me\fP (\fBirc_session_t\fP *session, const char *nch, const char *text)"
.br
.RI "\fISends the /me (CTCP ACTION) message to the nick or to the channel.\fP"
.ti -1c
.RI "int \fBirc_cmd_notice\fP (\fBirc_session_t\fP *session, const char *nch, const char *text)"
.br
.RI "\fISends the notice to the nick or to the channel.\fP"
.ti -1c
.RI "int \fBirc_cmd_kick\fP (\fBirc_session_t\fP *session, const char *nick, const char *channel, const char *reason)"
.br
.RI "\fIKick some lazy ass out of channel.\fP"
.in -1c
.SH "FUNCTION DOCUMENTATION"
.PP 
.SS "int irc_cmd_join (\fBirc_session_t\fP * session, const char * channel, const char * key)"
.PP
Joins the new IRC channel.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIsession\fP\fP
An initiated and connected session. 
.TP
\fB\fIchannel\fP\fP
A channel name to join to. Must not be NULL. 
.TP
\fB\fIkey\fP\fP
Channel password. May be NULL.
.PP
\fBReturns: \fP
.in +1c
Return code 0 means success. Other value means error, the error  code may be obtained through \fBirc_errno()\fP. Any error, generated by the  IRC server, is available through event_numeric.This function is used to JOIN the IRC channel. If the channel is not exist, it will be automatically created by the IRC server. Note that to JOIN the password-protected channel, you must know the password, and specify it in the \fIkey\fP argument. 
.SS "int irc_cmd_kick (\fBirc_session_t\fP * session, const char * nick, const char * channel, const char * reason)"
.PP
Kick some lazy ass out of channel.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIsession\fP\fP
An initiated and connected session. 
.TP
\fB\fInick\fP\fP
A nick to kick. Must not be NULL. 
.TP
\fB\fIchannel\fP\fP
A channel to kick this nick out of. Must not be NULL. 
.TP
\fB\fIreason\fP\fP
A reason to kick. May be NULL.
.PP
\fBReturns: \fP
.in +1c
Return code 0 means success. Other value means error, the error  code may be obtained through \fBirc_errno()\fP. Any error, generated by the  IRC server, is available through event_numeric.This function is used to kick a person out of channel. Note that you must be a channel operator to kick anyone.
.PP
\fBSee also: \fP
.in +1c
event_numeric 
.SS "int irc_cmd_me (\fBirc_session_t\fP * session, const char * nch, const char * text)"
.PP
Sends the /me (CTCP ACTION) message to the nick or to the channel.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIsession\fP\fP
An initiated and connected session. 
.TP
\fB\fInch\fP\fP
A target nick or channel. Must not be NULL. 
.TP
\fB\fItext\fP\fP
Action message text. Must not be NULL.
.PP
\fBReturns: \fP
.in +1c
Return code 0 means success. Other value means error, the error  code may be obtained through \fBirc_errno()\fP. Any error, generated by the  IRC server, is available through event_numeric.This function is used to send the /me message to channel or private. As for irc_cmd_msg, the target is determined by \fInch\fP argument.
.PP
\fBSee also: \fP
.in +1c
\fBirc_cmd_msg\fP 
.SS "irc_cmd_msg (\fBirc_session_t\fP * session, const char * nch, const char * text)"
.PP
Sends the message to the nick or to the channel.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIsession\fP\fP
An initiated and connected session. 
.TP
\fB\fInch\fP\fP
A target nick or channel. Must not be NULL. 
.TP
\fB\fItext\fP\fP
Message text. Must not be NULL.
.PP
\fBReturns: \fP
.in +1c
Return code 0 means success. Other value means error, the error  code may be obtained through \fBirc_errno()\fP. Any error, generated by the  IRC server, is available through event_numeric.This function is used to send the channel or private messages. The target is determined by \fInch\fP argument: if it describes nick, this will be a  private message, if a channel name - public (channel) message. Note that depending on channel modes, you may be required to join the channel to send the channel messages. 
.SS "int irc_cmd_notice (\fBirc_session_t\fP * session, const char * nch, const char * text)"
.PP
Sends the notice to the nick or to the channel.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIsession\fP\fP
An initiated and connected session. 
.TP
\fB\fInch\fP\fP
A target nick or channel. Must not be NULL. 
.TP
\fB\fItext\fP\fP
Notice text. Must not be NULL.
.PP
\fBReturns: \fP
.in +1c
Return code 0 means success. Other value means error, the error  code may be obtained through \fBirc_errno()\fP. Any error, generated by the  IRC server, is available through event_numeric.This function is used to send the channel or private notices. The target is determined by \fInch\fP argument: if it describes nick, this will be a  private message, if a channel name - public (channel) message. Note that depending on channel modes, you may be required to join the channel to send the channel notices.
.PP
The only difference between message and notice is that, according to RFC  1459, you must not automatically reply to NOTICE messages.
.PP
\fBSee also: \fP
.in +1c
\fBirc_cmd_msg\fP 
.SS "int irc_cmd_quit (\fBirc_session_t\fP * session, const char * reason)"
.PP
Sends QUIT command to the IRC server.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIsession\fP\fP
An initiated and connected session. 
.TP
\fB\fIreason\fP\fP
A reason to quit. May be NULL.
.PP
\fBReturns: \fP
.in +1c
Return code 0 means success. Other value means error, the error  code may be obtained through \fBirc_errno()\fP. Any error, generated by the  IRC server, is available through event_numeric.This function sends the QUIT command to the IRC server. This command  forces the IRC server to close the IRC connection, and terminate the  session. 
.SS "int irc_send_raw (\fBirc_session_t\fP * session, const char * format, ...)"
.PP
Sends raw data to the IRC server.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIsession\fP\fP
An initiated and connected session. 
.TP
\fB\fIformat\fP\fP
A printf-formatted string, followed by function args.
.PP
\fBReturns: \fP
.in +1c
Return code 0 means success. Other value means error, the error  code may be obtained through \fBirc_errno()\fP. Any error, generated by the  IRC server, is available through event_numeric.This function sends the raw data as-is to the IRC server. Use it to  generate a server command, which is not (yet) provided by libirc  directly. 
